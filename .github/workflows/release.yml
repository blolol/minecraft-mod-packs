name: Release updated mod packs
on:
  push:
    tags: '*/*' # Match tags like "perkpack/1.0.0"
jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Check out release tag
        uses: actions/checkout@v2
      - name: Extract mod pack details
        run: |
          naive_toml_value() {
            local toml_file="$1"
            local key="$2"
            awk -F '[=" ]' "/^${key} / { print \$5 }" "$toml_file"
          }

          pack_var() {
            local key="$1"
            naive_toml_value packs/$pack_slug/pack.toml "$key"
          }

          pack_slug="${GITHUB_REF_NAME%%/*}"
          echo "pack_slug=${pack_slug}" >> $GITHUB_ENV
          echo "pack_name=$(pack_var name)" >> $GITHUB_ENV
          echo "pack_version=$(pack_var version)" >> $GITHUB_ENV
          echo "pack_minecraft_version=$(pack_var minecraft)" >> $GITHUB_ENV
        shell: bash
      - name: Upload pack files to S3
        run: |
          # Manually set Content-Type and Content-Disposition for TOML files, since the AWS CLI's
          # automatic MIME type detection sets them to binary/octet-stream
          aws s3 sync --delete --acl public-read --exclude '*' --include '*.toml' \
            --content-type application/toml --content-disposition inline \
            "packs/${pack_slug}" "s3://minecraft/mod-packs/${pack_slug}/"

          # Sync non-TOML files using automatic MIME type detection (the default)
          aws s3 sync --delete --acl public-read --exclude '*.toml' \
            "packs/${pack_slug}" "s3://minecraft/mod-packs/${pack_slug}/"
        shell: bash
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1
      - name: Draft GitHub release
        run: |
          pack_polymc_download_url="https://s3.amazonaws.com/minecraft/mod-packs/${pack_slug}/${pack_name}_PolyMC_Instance.zip"
          pack_packwiz_metadata_url="https://s3.amazonaws.com/minecraft/mod-packs/${pack_slug}/pack.toml"

          pack_release_title="$pack_name $pack_version (Minecraft ${pack_minecraft_version})"
          cat <<EOS > $RUNNER_TEMP/pack_release_notes
          ## Changes

          * Add release notes here!

          ## Packages

          * **[PolyMC](https://polymc.org) instance:** $pack_polymc_download_url
          * **[packwiz](https://github.com/packwiz/packwiz) metadata:** $pack_packwiz_metadata_url
          EOS

          gh release create $GITHUB_REF_NAME --draft --title "$pack_release_title" \
            --notes-file $RUNNER_TEMP/pack_release_notes \
            $([[ $GITHUB_REF_NAME == */*-pre* ]] && echo -n '--prerelease')
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Notify IRC of release
        continue-on-error: true
        run: |
          from='Wheaties'
          to='#minecraft'
          message="${GITHUB_ACTOR} released ${pack_name} ${pack_version} (for Minecraft ${pack_minecraft_version})!"

          accept_header='Accept: application/json'
          authorization_header="Authorization: key=${BLOLOL_API_KEY} secret=${BLOLOL_API_SECRET}"
          content_type_header='Content-Type: application/json'

          base_url='https://api.blolol.com'
          request_url="${base_url}/v1/chat/events"

          request_body="$(jq -nc --arg from "$from" --arg to "$to" --arg message "$message" '{"event":{"type":"message","from":$from,"to":$to,"text":$message}}')"

          curl "$request_url" \
            -H "$accept_header" \
            -H "$authorization_header" \
            -H "$content_type_header" \
            -d "$request_body"
        shell: bash
        env:
          BLOLOL_API_KEY: ${{ secrets.BLOLOL_API_KEY }}
          BLOLOL_API_SECRET: ${{ secrets.BLOLOL_API_SECRET }}
